// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: streamsamples.proto

package streamer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamSamplesClient is the client API for StreamSamples service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamSamplesClient interface {
	SendSample(ctx context.Context, opts ...grpc.CallOption) (StreamSamples_SendSampleClient, error)
}

type streamSamplesClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamSamplesClient(cc grpc.ClientConnInterface) StreamSamplesClient {
	return &streamSamplesClient{cc}
}

func (c *streamSamplesClient) SendSample(ctx context.Context, opts ...grpc.CallOption) (StreamSamples_SendSampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamSamples_ServiceDesc.Streams[0], "/streamer.StreamSamples/SendSample", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamSamplesSendSampleClient{stream}
	return x, nil
}

type StreamSamples_SendSampleClient interface {
	Send(*SampleRequest) error
	CloseAndRecv() (*SampleResponse, error)
	grpc.ClientStream
}

type streamSamplesSendSampleClient struct {
	grpc.ClientStream
}

func (x *streamSamplesSendSampleClient) Send(m *SampleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamSamplesSendSampleClient) CloseAndRecv() (*SampleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SampleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamSamplesServer is the server API for StreamSamples service.
// All implementations must embed UnimplementedStreamSamplesServer
// for forward compatibility
type StreamSamplesServer interface {
	SendSample(StreamSamples_SendSampleServer) error
	mustEmbedUnimplementedStreamSamplesServer()
}

// UnimplementedStreamSamplesServer must be embedded to have forward compatible implementations.
type UnimplementedStreamSamplesServer struct {
}

func (UnimplementedStreamSamplesServer) SendSample(StreamSamples_SendSampleServer) error {
	return status.Errorf(codes.Unimplemented, "method SendSample not implemented")
}
func (UnimplementedStreamSamplesServer) mustEmbedUnimplementedStreamSamplesServer() {}

// UnsafeStreamSamplesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamSamplesServer will
// result in compilation errors.
type UnsafeStreamSamplesServer interface {
	mustEmbedUnimplementedStreamSamplesServer()
}

func RegisterStreamSamplesServer(s grpc.ServiceRegistrar, srv StreamSamplesServer) {
	s.RegisterService(&StreamSamples_ServiceDesc, srv)
}

func _StreamSamples_SendSample_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamSamplesServer).SendSample(&streamSamplesSendSampleServer{stream})
}

type StreamSamples_SendSampleServer interface {
	SendAndClose(*SampleResponse) error
	Recv() (*SampleRequest, error)
	grpc.ServerStream
}

type streamSamplesSendSampleServer struct {
	grpc.ServerStream
}

func (x *streamSamplesSendSampleServer) SendAndClose(m *SampleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamSamplesSendSampleServer) Recv() (*SampleRequest, error) {
	m := new(SampleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamSamples_ServiceDesc is the grpc.ServiceDesc for StreamSamples service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamSamples_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamer.StreamSamples",
	HandlerType: (*StreamSamplesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendSample",
			Handler:       _StreamSamples_SendSample_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "streamsamples.proto",
}
